/*!
@class QSettingsSettingsLoader

With this loader type, any value from QSettings can be used in the dialog

@note QSettings does **not** preserve the type for simple types as int/double/… . If you check the returned QVariants
type, you will always get QString for those. However, the values are convertible to int/double/… . So as long as you know
which type to use, it's fine. Because of this, and because an entry can be not existing, unlike the property loader,
the QSettings loader does not provide a member to get the metatype of the used settings entry.
*/

/*!
@fn QSettingsSettingsLoader::QSettingsSettingsLoader(QSettings *, const QString &, bool)

@param settings The settings object to be used
@param key The key within the settings to load/write to
@param ownSettings If `true`, the loader will delete the @a settings when it's destroyed. If `false`, thats not the case

If you set the @a settings to be owned, the desturction of the loader will destroy them too. If not, the loader will not do anything.
However, if you pass not owned settings, you have to make shure the object will not be destroyed until the loader was destroyed. Otherwise,
your application will most likely crash.
*/

/*!
@fn QSettingsSettingsLoader::createLoaders

@param settings The settings object to be used
@param rootKey The group key to scan
@param recursive Specifies, whether searching should be performed recusive or not
@returns A map of settings keys (including the @a key part) to the loader for that key.

This function will scan the given @a key group of the @a settings and create loaders for all child entries in that
group. If @a recursive is `false`, only the direct child entries will be used. If it is `true`, this function will
recusivly scan all subgroups and create entries for all of them.

The resulting map contains all entries with their keys as key. Each key will include the @a key that was passed to this
function. The @a settings state will not be changed, and none of the returned loaders will have ownership of the settings.
*/
