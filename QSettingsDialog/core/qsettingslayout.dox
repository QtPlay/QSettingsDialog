/*!
@class QSettingsLayout

Layouts can be created for any element within the dialog (see QSettingsLayout::LayoutType). The layout itself is a generalized
class that provides a bunch of functions to modify those elements, focused on their appereance and the organization of their child elements.

@warning Even though the layout is generalized, not all elements in the dialog support the same properties and methods. For example, QSettingsLayout::setOptional is defined
for group and entry elements, but not for the rest. If you are trying to access a property that is not defined for current type, a LayoutPropertyNotDefinedException will
be thrown. Check the documentation of each method to see which layout types support it

The layouts themselves are value-classes that can be copied without hesitation, because they are mere wrappers around the internal data structures.
This makes the use of them easy and simple. Even if you have multiple copies of one layout, if one is changed, all will see this change, because all
of them are internally using the same data

@warning Even though it's a value type class, the layout is bound to it's dialog. If the dialog gets delete while the layout is accessing it, the layout will still
work for some options, but others will create crashes. Make shure to not destroy the dialog while a layout is used. They are ment as short-time-wrappers.

@note All changes made with the layouts will not affect running dialogs.
*/

/*!
@fn QSettingsLayout::QSettingsLayout(QSettingsDialog *, bool)

@param settingsDialog The dialog to create the layout for
@param fromCurrentContainer `true`, to use the current container, `false` to create a root layout

If @a fromCurrentContainer is `false` (the default), a LayoutType::DialogLayout will be created from the dialog itself. If it is `true`, the dialogs current
container path (QSettingsDialog::containerPath) will be used.
*/

/*!
@fn QSettingsLayout::QSettingsLayout(QSettingsDialog *, const QString &, int)

@param settingsDialog The dialog to create the layout for
@param containerPath The path to create the layout for
@param entryId The id of the entry within the container, or -1, if the path container should be used

If @a entryId is < 0, a container for the given path will be created. An empty path will create a LayoutType::DialogLayout. If the path has 1 element,
it will be QSettingsLayout::CategoryLayout, a QSettingsLayout::SectionLayout for 2 and a QSettingsLayout::GroupLayout for 3.
If you have a section or group path, and id is 0 or greater, the entry with the given id inside the specified path will be used.

@note If the path or does not exists or no entry with the given id is insed of the path container, the newly created layout will be a null layout.
Use QSettingsLayout::isNull to check this.
*/

/*!
@fn QSettingsLayout::id

@returns The id of the element this layout manages

Will return the container id of the element this layout represents. For LayoutType::DialogLayout this will always be an emtpy string, and for
LayoutType::EntryLayout, the entry id (an integer) prepended by `#` will be returned. E.g. `#42` for an entry with the id 42

<table>
 <tr>
  <th>Supported Layout Types</th>
 </tr>
 <tr>
  <td>Supported for all layout types</td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::layoutType

@returns The LayoutType this layout is

<table>
 <tr>
  <th>Supported Layout Types</th>
 </tr>
 <tr>
  <td>Supported for all layout types</td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::isNull

@returns `true`, if this element is a null element, `false` if not

Null layouts can happen if you try to create a layout for a container path that does not exist

<table>
 <tr>
  <th>Supported Layout Types</th>
 </tr>
 <tr>
  <td>Supported for all layout types</td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::dialog

@returns The dialog this layout manages

If the dialog was destroyed while this layout is still alive, this function will return `nullptr`. It is save
to destroy a layout even after the dialog was deleted.

<table>
 <tr>
  <th>Supported Layout Types</th>
 </tr>
 <tr>
  <td>Supported for all layout types</td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::containerPath

@returns The container path

For categories, this is just the id. For sections and groups, this will be a 2 or three element path.

@note If the layout is a QSettingsLayout::EntryLayout, the elements container path (section or group) combined with the hashed id will be returned.
Example: The element with id 42 inside the default category and a section called "Baum". The returned path would be: `./Baum/#42`.
Please note that this is not a valid container path, just a representation of container and id.

<table>
 <tr>
  <th>Supported Layout Types</th>
 </tr>
 <tr>
  <td>Supported for all layout types</td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::parentContainer

@returns The parent layout, or a "null" layout, if the layout is without a parent

The parent container will only be available, if this layout was originally created from a parent layout. In other words, a layout created from
a constructor it will always return a null layout. If you created it from a parent, for example by using QSettingsLayout::elementAt, it will return the element
it was created from.

@attention always check if the parent is valid by using QSettingsLayout::isNull!

<table>
 <tr>
  <th>Supported Layout Types</th>
 </tr>
 <tr>
  <td>Supported for all layout types</td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::displayId

@returns The current display id of the element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::setDisplayId

@param displayId The id to be set as new display id
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::name

@returns The current name of the element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::setName

@param name The name to be set as new name
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::icon

@returns The current icon of the element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::setIcon

@param icon The icon to be set as new icon
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::tooltip

@returns The current tooltip of the element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::setTooltip

@param tooltip The tooltip to be set as new tooltip
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::isOptional

@returns `true`, if the element is optional, `false` if not
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::setOptional

@param optional The value that optional should be set to
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::defaultElement

@param allowCreateNew Specifies whether it's allowed to create the default element if it does not exist
@returns The default element within this element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

If the default element does not yet exist, @a allowCreateNew can be used to create it. If it is not created,
a null layout will be returned (See QSettingsLayout::isNull)

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::removeDefaultElement

@returns `true`, if the default group was removed, `false` if none exists
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

If the default element does exist, it will be removed. If does not currently exist, nothing happens

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::elementCount

@returns The number of child elements within this element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::elementAt

@param index The index of the desired child element
@returns A layout reference to the element at the given index
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

If index is not a valid index, the function will assert.

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::indexOfElement(const QSettingsLayout &)

@param element The element to be found within this layout
@returns The index of the child within this layout, or -1 if it was not found
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::indexOfElement(const QString &)

@param elementName The name of the element to be found within this layout
@returns The index of the child within this layout, or -1 if it was not found
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::createElement

@param index The index to insert the item at
@param id The id the new element should have
@param name The display name the element should have
@param icon The display icon for the element
@param tooltip The tooltip for the new element
@returns A layout reference to the newly created element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

If an element with that @a id does already exist, it will be deleted and overwritten. To avoid this, check for
children beforehand. If @a name is left as a null string, the @a id will be used as name. If index is not a valid index,
the function will assert.

For group elements, use QSettingsLayout::createGroupElement.

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::createGroupElement

@param index The index to insert the item at
@param id The id the new element should have
@param displayId The displayId the new element should have
@param name The display name the element should have
@param optional Specifies whether the element should be optional or not
@param tooltip The tooltip for the new element
@returns A layout reference to the newly created element
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

If an element with that @a id does already exist, it will be deleted and overwritten. To avoid this, check for
children beforehand. If @a name is left as a null string, the @a id will be used as name. If index is not a valid index,
the function will assert.

For other elements, use QSettingsLayout::createElement.

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::removeElement

@param index The index of the child element to be removed
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

If index is not a valid index, the function will assert.

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::moveElement

@param indexFrom The index of the child element to be moved
@param indexTo The index to move the element to
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type

If one of the indexes is not a valid index, the function will assert.

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/

/*!
@fn QSettingsLayout::transferElement

@param indexFrom The index of the child element to be moved
@param targetLayout The layout to move the element to
@param indexTo The index to move the element to
@throws LayoutPropertyNotDefinedException Will be thrown if called on a layout with an unsupported type
@throws InvalidTargetLayoutException Will the thrown if the target layout is of a different layout type

If one of the indexes is not a valid index, the function will assert. To move entries from layouts to groups
and the other way around, please use QSettingsContainer classes.

@note This function will *not* include the default element.

<table>
 <tr>
  <th colspan="2">Supported Layout Types</th>
 </tr>
 <tr>
  <td>QSettingsLayout::DialogLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::CategoryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::SectionLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::GroupLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false" checked> @endhtmlonly </td>
 </tr>
 <tr>
  <td>QSettingsLayout::EntryLayout</th>
  <td> @htmlonly <input type="checkbox" onclick="return false"> @endhtmlonly </td>
 </tr>
</table>
*/
