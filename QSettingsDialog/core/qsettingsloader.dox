/*!
@class QSimpleSettingsLoader

The simple loader can be used to manage settings sources that are fast and can be accessed synchronously from the main thread.

For sources that belong to different threads or will take some time to be loaded/saved, please use QAsyncSettingsLoader
*/

/*!
@fn QSimpleSettingsLoader::load

@param data **[outParam]** A reference to the `QVariant` object to load the data into. (Defaults to `QVariant::Invalid`)
@param userEdited **[outParam]** A reference to a `bool` to specify whether the value comes from the user or is the default. (Defaults to `false`)
@returns Should return `true`, if loading was successful, `false` if not

This method will be called from the engine to load settings for the display dialog. The loaded value should be written into `data`. You can use
the `userEdited` parameter to activate/deactivate the entry. If loading was successful return `true`. If not return `false` and an error will be shown
to the user and the entry that uses this loader will be diabled.
*/

/*!
@fn QSimpleSettingsLoader::save

@param data The data to be saved.
@returns `true`, if saving was successful, `false` if not

If saving was successful return `true`. If not return `false` and an error will be shown
to the user and the entry that uses this loader will be diabled.
*/

/*!
@fn QSimpleSettingsLoader::reset

@returns `true`, if resetting was successful, `false` if not

If resetting was successful return `true`. If not return `false` and an error will be shown
to the user and the entry that uses this loader will be diabled.
*/

/*!
@class QAsyncSettingsLoader

A QObject based loader, capable of loading data from different threads and data with long loading/saving times. Create async loaders
on the thread that holds the data (or move them there). The engine will call the load/save/reset methods with a Qt::QueuedConnection
and will use the same to react to the signals that indicate a completition of the corresponding task.

For simple sources, that can load fast and on the main thread, please use QSimpleSettingsLoader.
*/

/*!
@fn QAsyncSettingsLoader::loadData

As soon as loading is finished, you have to emit the loadDone signal. This has to be emitted in **any case**!. You can use the signals
parameters to tell the engine about the result of loading.
*/

/*!
@fn QAsyncSettingsLoader::saveData

@param data The data to be saved.

As soon as saving is finished, you have to emit the saveDone signal. This has to be emitted in **any case**!. You can use the signals
parameter to tell the engine about the result of saving.
*/

/*!
@fn QAsyncSettingsLoader::resetData

As soon as resetting is finished, you have to emit the resetDone signal. This has to be emitted in **any case**!. You can use the signals
parameter to tell the engine about the result of resetting.
*/

/*!
@fn QAsyncSettingsLoader::loadDone

@param successful Should be `true`, if loading was successful, `false` if not
@param data A `QVariant` object that contains the loaded data (Use QVariant::Invalid if loading failed)
@param userEdited A `bool` to specify whether the value comes from the user or is the default. (Defaults to `false`)

The loaded value should be in `data`. You can use the `userEdited` parameter to activate/deactivate the entry. If loading was successful,
the parameter should be `true`. If not use `false` and an error will be shown to the user and the entry that uses this loader will be diabled.
*/

/*!
@fn QAsyncSettingsLoader::saveDone

@param successful Should be `true`, if saving was successful, `false` if not

If saving was successful, the parameter should be `true`. If not use `false` and an error will be shown
to the user and the entry that uses this loader will be diabled.
*/

/*!
@fn QAsyncSettingsLoader::resetDone

@param successful Should be `true`, if resetting was successful, `false` if not

If resetting was successful, the parameter should be `true`. If not use `false` and an error will be shown
to the user and the entry that uses this loader will be diabled.
*/

