/*!
@class QSettingsDialog

The settings dialog is the core class of the QSettingsDialog library. It manages the virtual representation of the settings entries.

### Dialog structure
A settings dialog provides the following structure:
@code
QSettingsDialog
 |
 |--Category
 |   |
 |   |--Section
 |   |   |
 |   |   |--QSettingsEntry
 |   |   |
 |   |   |--Group
 |   |   |   |
 |   |   |   |--QSettingsEntry
 |   |   |   ⋮
 |   |   ⋮
 |   ⋮
 ⋮
@endcode

The dialog itself contains categories. Each category is made up of sections. Each section can contain entries and groups. Groups
can contain QSettingsEntries. While the dialog itself an the entries are classes, the 3 others are internally used and can be indirectly created and
modified through the QSettingsDialog.

The dialog proivdes general and simple members to access and modify all of the listed elements, but only in a limited way, that should suffice
for most applications. However, if you need more control of the organization of these elements and their appereance, the QSettingsLayout will
be useful. For more option on the entries and some encapsulation, the QSettingsContainer will be at your aid.

### Settings Path
The dialog uses a path based mechanism to identify containers and entries. Each container (categories, sections and groups) has a string id that
can be any combination of latin letters (both cases), numbers, the underscore and hyphen. Path elements are seperated by a slash. Default containers
(categories and sections only) can be set using a dot. In some functions, an empty string means to use the current container. Function that accept empty ids
are marked as such. Using simply two dots as a full path is a shortcut for "default category, default section, no group". A completly emty path means the same
as two slashes

The following shows a few example paths.
@code
 - category/section/group		-> category, section, group
 - category/another_section		-> category, another_section, [no group]
 - category/./grp3				-> category, [default section], grp3
 - .//more-group				-> [default category], [current section], more-group
 - //							-> [current category], [current section], [current group]
 - ..							-> [default category], [default section], [no group]
 - /.							-> [current category], [default section], [no group]
 -								-> [current category], [current section], [current group]
@endcode
*/

/*!
@fn QSettingsDialog::containerPath

@returns a valid settings path

Depending on whehter the group is currently set, this path can contain either only category and section, or all three:
`category/section/group` or `category/section`
*/

/*!
@fn QSettingsDialog::groupId

@returns the id of the current group, or a null string if no group is currently set
*/

/*!
@fn QSettingsDialog::setCategory

@param id The id of the category to be set
@param name The display name of the category
@param icon The display icon of the category
@param tooltip The tooltip for the category element
@throws InvalidContainerPathException Will be thrown if id is not a valid container id

This function will set the dialogs current category to @a id, if it is valid. If there is no category existing
with that id a new one will be created with the @a id as default name. If you leave id empty, the current category will be used.
Regardles of whether the category was created or not, if @a name is not null, this will be set as new name. Same goes for @a icon and @a tooltip.
*/

/*!
@fn QSettingsDialog::setSection

@param id The id of the section to be set
@param name The display name of the section
@param icon The display icon of the section
@param tooltip The tooltip for the section element
@throws InvalidContainerPathException Will be thrown if id is not a valid container id

This function will set the dialogs current section to @a id, if it is valid. If there is no section existing
with that id a new one will be created with the @a id as default name. If you leave id empty, the current section will be used.
Regardles of whether the section was created or not, if @a name is not null, this will be set as new name. Same goes for @a icon and @a tooltip.
*/

/*!
@fn QSettingsDialog::setGroup

@param id The id of the group to be set
@param displayId The display id of the section.
@param name The display name of the group
@param optional Sets the group to be optional or not
@param tooltip The tooltip for the group element
@throws InvalidContainerPathException Will be thrown if id is not a valid container id

This function will set the dialogs current group to @a id, if it is valid. If there is no group existing
with that id a new one will be created with the @a id as default name and 0 as display id. If you leave id empty, the current section will be used.
Regardles of whether the group was created or not, if @a name is not null, this will be set as new name. Same goes for the @a tooltip,
and @a displayId and @a optional if they are not negative. @a optional will be converted to `bool`. If you want to set it, simply use `true` and `false` as values.

The @a displayId can be used to create a group with a custom appeareance. The default group (0) will always be defined. Check the
QSettingsWidgetDialogEngine for more details about custom groups.

Groups are optional. If not group is set, new entries will be placed in the section. Use QSettingsDialog::unsetGroup to unset groups.
*/

/*!
@fn QSettingsDialog::unsetGroup

After this call, entries will be placed in the current section again, instead of a group. Unsettings a group does not delete it, only change
the current group to nothing. To set a group again, use QSettingsDialog::setGroup.
*/

/*!
@fn QSettingsDialog::setContainer

@param containerPath The container path this dialog should be set to
@throws InvalidContainerPathException Will be thrown if the path is not a valid container path

Use this function to set containers based on a path. If any of the ids in the path does not yet exist, new containers
will be created with the id as name. You can use all kinds of valid paths for this function, including empty elements to keep the current
container for that path part. if you use 1 slash (just category and section), the group will be unset. use 2 slashes and an empty group id to keep the current group.

@warning This function will **NOT** create the new containers. It will just set the id. The containers will be automatically created as soon as they are accessed.
(For example by adding a child element to it). To explicitly create the containers, use the setter functions.
*/

/*!
@fn QSettingsDialog::removeContainer

@param containerPath The container path that should be removed
@returns `true`, if a container with that path was removed, `false` if it does not exist
@throws InvalidContainerPathException Will be thrown if the path is not a valid container path

Use this function to remove any container based on a path. You can pass in a single id, a path of two or a path of three elements.
If you have only an id, the category with that id will be removed. Using a two element path will remove the section within the given category.
The same happens for paths with 3 elements with groups. You can use empty ids for all elements.

@attention If you remove a currently active container, this will delete the container and all it's contents, but not unset the container as current. You can
manually change the current container in that case. If you don't do it, the container will be recreated as soon as it is accessed. (For example by adding
a child element to it)
*/

/*!
@fn QSettingsDialog::appendEntry(QSettingsEntry *)

@param entry The entry to be appended
@returns The new id of the entry. Can be used to get the entry

Appends to the entry to the current container. This can either be a group or a section, depeding on whether it is set or not.
*/

/*!
@fn QSettingsDialog::appendEntry(const QString &, QSettingsEntry *)

@param containerPath The container to insert the entry into
@param entry The entry to be appended
@returns The new id of the entry. Can be used to get the entry
@throws InvalidContainerPathException Will be thrown if the path is not a valid container path

Appends to the entry to the given container. This can either be a group or a section. You can use empty ids to use current elements.
If containers within the path do not exist, they will be created with the id as name. This function will not change the current container.
*/

/*!
@fn QSettingsDialog::prependEntry(QSettingsEntry *)

@param entry The entry to be prepended
@returns The new id of the entry. Can be used to get the entry

Prepends to the entry to the current container. This can either be a group or a section, depeding on whether it is set or not.
*/

/*!
@fn QSettingsDialog::prependEntry(const QString &, QSettingsEntry *)

@param containerPath The container to insert the entry into
@param entry The entry to be prepended
@returns The new id of the entry. Can be used to get the entry
@throws InvalidContainerPathException Will be thrown if the path is not a valid container path

Prepends to the entry to the given container. This can either be a group or a section. You can use empty ids to use current elements.
If containers within the path do not exist, they will be created with the id as name. This function will not change the current container.
*/

/*!
@fn QSettingsDialog::getEntry

@param id The id of the entry searched for
@returns The entry as shared pointer, if existing.

If the settings dialog has an entry somewhere with that id, it will be returned. If not, a null pointer.

@note This function performs a recursive search through all containers until the id was found. The more containers and elements
the dialog has, the longer this will take.
*/

/*!
@fn QSettingsDialog::getEntryPath

@param id The id of the entry searched for
@returns The path of the container that holds this entry, or a null string

If the settings dialog has an entry somewhere with that id, the path to the container it is placed in will be returned. If not, a null string.

@note This function performs a recursive search through all containers until the id was found. The more containers and elements
the dialog has, the longer this will take.
*/

/*!
@fn QSettingsDialog::removeEntry

@param id The id of the entry to be removed
@returns `true`, if an entry with that id was found and removed, `false` if not

If the settings dialog has an entry somewhere with that id, it will be deleted and `true` returned. If not, `false`.

@note This function performs a recursive search through all containers until the id was found. The more containers and elements
the dialog has, the longer this will take.
*/

/*!
@fn QSettingsDialog::createContainerPath(QString, QString, QString)

@param category The category id for the path
@param section The section id for the path
@param group The group id for the path, or a null string to exclude the group
@returns The resulting path, if all ids are valid
@throws InvalidContainerPathException Will be thrown if one of the ids is not a valid container id

The path will be generated as is, i.e. empty strings will stay empty. If group is a null string, the path will
be a section path (2 elements). If not, the path will contain all 3 elements.

@attention For the group id, null and empty strings make a difference. If the group is only empty, not null, a group path
will be created. To create a null string, simply use `QString()`. For an empty string that is not null, use `QString("")` instead.
*/

/*!
@fn QSettingsDialog::openSettings

@param parentWindow The parent window the dialog should be created for. `nullptr` to create a root window.

@note Only one settings dialog can be shown at a time. Calling this function while the dialog is running will generate a warning
and do nothing.
*/

/*!
@fn QSettingsDialog::execSettings

@param parentWindow The parent window the dialog should be created for. `nullptr` to create a root window.
@returns The exec result of the dialog (See QDialog::DialogCode)

@note Only one settings dialog can be shown at a time. Calling this function while the dialog is running will generate a warning
and return -1.
*/

/*!
@fn QSettingsDialog::saved

@param closed Indicates, whether the dialog was closed with that saving action.

Since most dialogs support both, apply and ok, this signal can be emitted multiple times with `false`. Once it was
emitted with `true`, the dialog is considered closed and, if using a Qt::QueuedConnection, it is possible to show a new dialog directly from the slot.
*/

/*!
@fn QSettingsDialog::resetted

Resettings a dialog will automatically close it. If using a Qt::QueuedConnection, it is possible to show a new dialog directly from the slot.
*/

/*!
@fn QSettingsDialog::resetted

Canceling a dialog will automatically close it. If using a Qt::QueuedConnection, it is possible to show a new dialog directly from the slot.
*/
