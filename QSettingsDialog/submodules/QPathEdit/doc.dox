/**
 * \class QPathEdit
 *
 * The QPathEdit widget class is a special kind of an edit field, with the purpose to
 * retriev file-paths from the user. See \ref index "Main Page" for more details
 */

/**
 * \property QPathEdit::style
 *
 * \default{QPathEdit::SeperatedButton}
 *
 * The Style describes the visual appeareance of the edit. The following styles are available
 * <table>
 *  <tr>
 *   <th>Name</th>
 *   <td>QPathEdit::SeperatedButton</td>
 *   <td>QPathEdit::JoinedButton</td>
 *   <td>QPathEdit::NoButton</td>
 *  </tr>
 *  <tr>
 *   <th>Edit-Style (Windows):</th>
 *   <td>\image html sepbtn_win.png</td>
 *   <td>\image html joinbtn_win.png</td>
 *   <td>\image html nobtn_win.png</td>
 *  </tr>
 *  <tr>
 *   <th>Edit-Style (OsX):</th>
 *   <td>\image html sepbtn_mac.png</td>
 *   <td>\image html joinbtn_mac.png</td>
 *   <td>\image html nobtn_mac.png</td>
 *  </tr>
 *  <tr>
 *   <th>Edit-Style (Ubuntu):</th>
 *   <td>\image html sepbtn_x11.png</td>
 *   <td>\image html joinbtn_x11.png</td>
 *   <td>\image html nobtn_x11.png</td>
 *  </tr>
 * </table>
 *
 * The style has no effect on the functionality, except that the NoButton style will
 * make it impossible for the user to open the file dialog. But it can still be used
 * with the showDialog() slot.
 *
 * \accessors{
 *  \readAc{style()}
 *  \writeAc{setStyle()}
 * }
 */

/**
 * \property QPathEdit::dialogButtonIcon
 *
 * \default{<i>&lt;Depends on the style. Check QPathEdit::style to see how each default icon looks like&gt;</i>}
 *
 * This property holds the icon to be used for the QToolButton that shows the QFileDialog.
 * It is save to change this property, even if the current Style does not use the icon
 *
 * \accessors{
 *  \readAc{dialogButtonIcon()}
 *  \writeAc{setDialogButtonIcon()}
 *  \resetAc{resetDialogButtonIcon()}
 * }
 */

/**
 * \property QPathEdit::pathMode
 *
 * \default{QPathEdit::ExistingFile}
 *
 * The mode for filters for the completer, the validator, and the dialog.
 * See QPathEdit::PathMode for more details.
 *
 * \accessors{
 *  \readAc{pathMode()}
 *  \writeAc{setPathMode()}
 * }
 */

/**
 * \property QPathEdit::dialogOptions
 *
 * \default{0}
 *
 * Options for the QFileDialog. See QFileDialog::Options for details
 *
 * \accessors{
 *  \readAc{dialogOptions()}
 *  \writeAc{setDialogOptions()}
 * }
 */

/**
 * \property QPathEdit::editable
 *
 * \default{false}
 *
 * If set to false, the user will see the path and be able to select and copy it. However,
 * he will not be able to edit it manually.
 * If set to true, the user can edit the path manually. However, since theres a validator
 * working in the background, the QPathEdit::path will only be update, if the entered path is
 * valid. In addition to that, invalid paths will be marked red, to indicate the user, that
 * his path is wrong
 *
 * \accessors{
 *  \readAc{isEditable()}
 *  \writeAc{setEditable()}
 * }
 */

/**
 * \property QPathEdit::useCompleter
 *
 * \default{true}
 *
 * Activates or deactivates the completer. The completer is an auto-completer-mechanism,
 * that will allow the user easier path finding, if the QPathEdit is editable. It uses an
 * underlying QFileSystemModel to get the paths.
 * Since I have only limited control with that model, there are a few important points
 * regarding the completer:
 *
 * - Filters: All filters will be applied to the completer too. However, since you can't
 * choose a filter like in the QFileDialog, the completer will always use all filters.
 * That means, if you one of you filters is the wildcard-filter (*), the model will show
 * all files, ignoring any other filters. Files that don't apply to the filter will hidden
 * - Paths: The model uses native paths, more accurate native seperators. To maintain
 * the cross-plattform-ability of this class, all entered paths will be converted to
 * Qt-style seperators (/). The model does accept both seperators, if listing paths. This
 * means no matter what seperators the user enters, QPathEdit::path will always return a
 * path using "/"
 *
 * \accessors{
 *  \readAc{useCompleter()}
 *  \writeAc{setUseCompleter()}
 * }
 */

/**
 * \property QPathEdit::defaultDirectory
 *
 * \default{<a href="http://doc.qt.io/qt-5/qstandardpaths.html#StandardLocation-enum">QStandardPaths::HomeLocation</a>}
 *
 * The default directory is the directory for the QFileDialog. If currently no path is
 * set, the QFileDialog will show the default directory. If not set, this will be the
 * users home directory.
 *
 * \accessors{
 *  \readAc{defaultDirectory()}
 *  \writeAc{setDefaultDirectory()}
 * }
 */

/**
 * \property QPathEdit::path
 *
 * \default{QString()}
 *
 * Holds the current entered path. This path is guaranteed to be always a valid file path
 * or empty. If the user enters invalid data, this path won't be updated. In fact, it only
 * changes as soon as the user finish editing (QLineEdit::editingFinished() is used to
 * determine this). If you set the path, the displayed path will always be updated. However,
 * if you pass an invalid path, it may or may not be stored as path. Check the write
 * accessor for more details.
 *
 * \accessors{
 *  \readAc{path()}
 *  \writeAc{setPath()}
 *  \resetAc{clear()}
 *  \notifyAc{pathChanged()}
 * }
 */

/**
 * \property QPathEdit::placeholder
 *
 * \default{QString()}
 *
 * The line edits placeholder to be shown if currently no path is entered.
 *
 * \accessors{
 *  \readAc{placeholder()}
 *  \writeAc{setPlaceholder()}
 * }
 */

/**
 * \property QPathEdit::nameFilters
 *
 * \default{"All Files (*)" (may differ, since the value of QFileDialog::nameFilters is used)}
 *
 * This property holds the name filters for both the dialog and the completer. For more
 * details on this filters, check QFileDialog::setNameFilters.
 *
 * \accessors{
 *  \readAc{nameFilters()}
 *  \writeAc{setNameFilters()}
 * }
 */

/**
 * \property QPathEdit::mimeTypeFilters
 *
 * \default{"application/octet-stream" (may differ, since the value of QFileDialog::mimeTypeFilters is used)}
 *
 * This property holds the name filters for both the dialog and the completer. For more
 * details on this filters, check QFileDialog::setMimeTypeFilters.
 *
 * \accessors{
 *  \readAc{nameFilters()}
 *  \writeAc{setNameFilters()}
 * }
 */

/**
 * \fn QPathEdit::setPath
 *
 * \param path the path to be set
 * \param allowInvalid Allow path to be invalid.
 *
 * \return true, if the set path is valid, false if not (If invalid paths are allowed,
 * the path inside the edit will be set, even if false is returend)
 *
 * If allowInvalid is true, and the path is invalid, only the contents of the QLineEdit
 * will be changed, not the stored, valid path. If invalid and false, this function
 * does nothing. If the path is valid, it will always be set.
 */

/**
 * \fn QPathEdit::showDialog
 *
 * This slot can be used to manually show the Dialog. It will be automatically called, when
 * the user clicks the button. Even if the Dialog is not user-accessibale (style is set to
 * QPathEdit::NoDialog), this slot will still show the dialog. This way you can use the
 * complete functionality of the QPathEdit, even if you can't show a button next to the edit
 */
