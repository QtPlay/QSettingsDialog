/*!
@class VariantWidgetsRegistrator

The static members of this class can be used to globally register different types of edit widgets. They are seperated into four
groups, each represented by one of the member functions.

@attention By default, **all** of them will be automatically registered when the dll is loaded. You can modify this behavior
by settings an environment viriable, #VARIANT_WIDGETS_AUTOLOAD.
*/

/*!
@fn VariantWidgetsRegistrator::registerGroupWidgets

The groups widgets are for now just one - the default group widget that is a QGroupBox. It has the id 0

@note By default this one is enabled. If you set the environment variable, use the #AUTOLOAD_GROUPS value
to include this
*/

/*!
@fn VariantWidgetsRegistrator::registerVariantWidgets

The default widgets are widgets for known and editable types that are registered as metatypes. The following
list shows all included types with their edit widgets:
<table>
 <tr>
  <th>Metatype</th>
  <th>Edit widget</th>
 </tr>
 <tr>
  <td>QMetaType::Bool</td>
  <td>QCheckBox</td>
 </tr>
 <tr>
  <td>QMetaType::UInt</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::Double</td>
  <td>QDoubleSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::QString</td>
  <td>QLineEdit</td>
 </tr>
 <tr>
  <td>QMetaType::QByteArray</td>
  <td>QLineEdit</td>
 </tr>
 <tr>
  <td>QMetaType::Long</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::LongLong</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::Short</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::Char</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::Ulong</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::ULongLong</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::UShort</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::SChar</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::UChar</td>
  <td>QSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::Float</td>
  <td>QDoubleSpinBox</td>
 </tr>
 <tr>
  <td>QMetaType::QDate</td>
  <td>QDateEdit</td>
 </tr>
 <tr>
  <td>QMetaType::QTime</td>
  <td>QTimeEdit</td>
 </tr>
 <tr>
  <td>QMetaType::QColor</td>
  <td>[QColorEdit](https://github.com/Skycoder42/QColorEdit)</td>
 </tr>
 <tr>
  <td>QMetaType::QStringList</td>
  <td>ListEdit (custom class)</td>
 </tr>
 <tr>
  <td>QMetaType::QUrl</td>
  <td>QLineEdit (with validator)</td>
 </tr>
 <tr>
  <td>QMetaType::QDateTime</td>
  <td>QDateTimeEdit</td>
 </tr>
 <tr>
  <td>QMetaType::QFont</td>
  <td>QFontComboBox</td>
 </tr>
 <tr>
  <td>QMetaType::QKeySequence</td>
  <td>QKeySequenceEdit</td>
 </tr>
 <tr>
  <td>QMetaType::QUuid</td>
  <td>QLineEdit (with validator)</td>
 </tr>
</table>

@note By default this one is enabled. If you set the environment variable, use the #AUTOLOAD_WIDGETS value
to include this
*/

/*!
@fn VariantWidgetsRegistrator::registerEnumFactories

A registry is installed that is able to automatically create edit widgets for basically any enum or flags.

### Enums
The requirement for enums to be used is to register the enum with #Q_ENUM. The id of the correpsonding widget will be
`qMetaTypeId<MyEnum>()`.

The enum can be displayed as a combobox or as a list of radiobuttons. This can be done using special properties.
- `showAsRadio : bool` -> Can be used to show a radiolist instead of a combox. Defaults to false
- `translated : bool` -> If set (the default), the combobox will look for translations

### Flags
To have flags, the flags type has to be created using #Q_DECLARE_FLAGS and have to be registered with #Q_FLAG. However, in addition
to that, you will have to register converter operations to QVariant to make the flags work. Use the #REGISTER_FLAG_CONVERTERS macro
in your main after you created the QApplication to do so.

The flags will be displayed as a Checklist. It too provides the translation property:
- `translated : bool` -> If set (the default), the combobox will look for translations

### Translation format
All translations will be done by using the enums name as context and the values name as key. Simple example:
@code{.cpp}
class MyClass : public QObject
{
	Q_OBJECT
public:
	enum MyEnum {
		Value0,
		Value1
	};
	Q_ENUM(MyEnum)
};
@endcode

Will have `MyEnum` as context and `Value0` (or `Value1`) as key for the translation.

@note By default this one is enabled. If you set the environment variable, use the #AUTOLOAD_ENUMS value
to include this
*/

/*!
@fn VariantWidgetsRegistrator::registerExtendedVariantWidgets

The extended widgets are widgets that I decided are somewhat important to have, but are not represented by the default widgets. The following
list shows all included types with their edit widgets:

<table>
 <tr>
  <th>Class-Name</th>
  <th>Edit widget</th>
 </tr>
 <tr>
  <td>FilePath</td>
  <td>[QPathEdit](https://github.com/Skycoder42/QPathEdit)</td>
 </tr>
 <tr>
  <td>IntRange</td>
  <td>QSlider</td>
 </tr>
 <tr>
  <td>HtmlText</td>
  <td>QTextEdit (with advanced context menu)</td>
 </tr>
</table>

To get the id's of each of these types, use e.g. `qMetaTypeId<FilePath>()` as id for the QSettingsEntry displayId.

@note By default this one is enabled. If you set the environment variable, use the #AUTOLOAD_EXTENDED value
to include this
*/
